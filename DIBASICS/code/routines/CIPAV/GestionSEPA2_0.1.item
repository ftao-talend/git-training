// template routine Java
package routines;
import java.math.BigInteger;
 
/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
 public  class GestionSEPA2 {
   
    /**
     * ibanTest: Validation de l'IBAN par modulo97
     * 
     * {talendTypes} String
     * 
     * {Category} Banque
     * 
     * {param} string("NumSEPA")  input: Numero SEPA.
     * 
     * {example} ibanTest("FR5440031000010000333012U82") # true.
     */
  
	 private static final int IBANNUMBER_MIN_SIZE = 15;
	 private static final int IBANNUMBER_MAX_SIZE = 34;
	 private static final BigInteger IBANNUMBER_MAGIC_NUMBER = new BigInteger("97");
	 
	public static final boolean ibanTest(String accountNumber) {

		String newAccountNumber = accountNumber.trim();
	 
		// Check that the total IBAN length is correct as per the country. If not, the IBAN is invalid. We could also check
		// for specific length according to country, but for now we won't
		if (newAccountNumber.length() < IBANNUMBER_MIN_SIZE || newAccountNumber.length() > IBANNUMBER_MAX_SIZE) {
			return false;
		}
	 
		// Move the four initial characters to the end of the string.
		newAccountNumber = newAccountNumber.substring(4) + newAccountNumber.substring(0, 4);
	 
		// Replace each letter in the string with two digits, thereby expanding the string, where A = 10, B = 11, ..., Z = 35.
		StringBuilder numericAccountNumber = new StringBuilder();
		for (int i = 0;i < newAccountNumber.length();i++) {
			numericAccountNumber.append(Character.getNumericValue(newAccountNumber.charAt(i)));
			}
	 
		// Interpret the string as a decimal integer and compute the remainder of that number on division by 97.
		BigInteger ibanNumber = new BigInteger(numericAccountNumber.toString());
		return ibanNumber.mod(IBANNUMBER_MAGIC_NUMBER).intValue() == 1;
	 
	}
}