// template routine Java
package routines;
import java.math.BigDecimal;
 
/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class GestionRIB {
 
   
    private static final String SOURCES = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    private static final String RESULTS = "123456789123456789234567890123456789";
 
    /**
     * CalculCle: Calcul la clef d'un compte bancaire à partir du
     *               code banque, code guichet et numéro de comte.
     * 
     * {talendTypes} String
     * 
     * {Category} Banque
     * 
     * {param} string("NumBanque")  input: Code de l'établissement bancaire sur 5 chiffres.
     * {param} string("NumGuichet") input: Code de l'agence bancaire sur 5 chiffres.
     * {param} string("NumCompte")  input: Numéro du compte bancaire sur 11 caractères.
     * 
     * {example} CalculCleRIB("12345", "12345", "1234567890N") # 34 !.
     */
    public static final String CalculCle(String NumBanque, String NumGuichet, String NumCompte)
    {
 
    	if (NumBanque.length()!=5 || NumBanque==null || NumGuichet.length()!=5 || NumGuichet==null || NumCompte.length()!=11 || NumCompte==null)
    		return "  ";
 
    	final StringBuilder buffer = new StringBuilder(NumCompte);
    	for(int i = 0;i<11;i++)
    	{
    		buffer.setCharAt(i,RESULTS.charAt( SOURCES.indexOf(buffer.charAt(i))));
    	}
    	String Compte = NumBanque.concat(NumGuichet.concat(buffer.substring(0, 11).concat("00")));
    	BigDecimal a = (new BigDecimal(Compte)).remainder(new BigDecimal("97"));
    	BigDecimal cle = (new BigDecimal("97")).subtract(a);
    	String CleRIB = (cle.intValue() < 10) ? "0".concat(cle.toString()) : cle.toString();
    	return CleRIB;
    }
}
